/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CredentialRegistry {
  export type CredentialStruct = {
    hash: BytesLike;
    issuer: AddressLike;
    timestamp: BigNumberish;
    isRevoked: boolean;
    revocationReason: string;
    credentialId: string;
    ipfsHash: string;
    arweaveId: string;
  };

  export type CredentialStructOutput = [
    hash: string,
    issuer: string,
    timestamp: bigint,
    isRevoked: boolean,
    revocationReason: string,
    credentialId: string,
    ipfsHash: string,
    arweaveId: string
  ] & {
    hash: string;
    issuer: string;
    timestamp: bigint;
    isRevoked: boolean;
    revocationReason: string;
    credentialId: string;
    ipfsHash: string;
    arweaveId: string;
  };

  export type IssuerStruct = {
    did: string;
    name: string;
    isActive: boolean;
    registrationDate: BigNumberish;
    totalCredentials: BigNumberish;
    revokedCredentials: BigNumberish;
  };

  export type IssuerStructOutput = [
    did: string,
    name: string,
    isActive: boolean,
    registrationDate: bigint,
    totalCredentials: bigint,
    revokedCredentials: bigint
  ] & {
    did: string;
    name: string;
    isActive: boolean;
    registrationDate: bigint;
    totalCredentials: bigint;
    revokedCredentials: bigint;
  };

  export type VerifierStruct = {
    name: string;
    isActive: boolean;
    registrationDate: BigNumberish;
    totalVerifications: BigNumberish;
  };

  export type VerifierStructOutput = [
    name: string,
    isActive: boolean,
    registrationDate: bigint,
    totalVerifications: bigint
  ] & {
    name: string;
    isActive: boolean;
    registrationDate: bigint;
    totalVerifications: bigint;
  };
}

export interface CredentialRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CONTRACT_NAME"
      | "CONTRACT_VERSION"
      | "DEFAULT_ADMIN_ROLE"
      | "ISSUER_ROLE"
      | "VERIFIER_ROLE"
      | "anchorCredential"
      | "credentials"
      | "emergencyRecover"
      | "getContractStats"
      | "getCredential"
      | "getIssuer"
      | "getIssuerCredentials"
      | "getRoleAdmin"
      | "getVerifier"
      | "grantRole"
      | "hasRole"
      | "isIssuer"
      | "isVerifier"
      | "issuerCredentials"
      | "issuers"
      | "pause"
      | "paused"
      | "registerIssuer"
      | "registerVerifier"
      | "registeredAddresses"
      | "removeIssuer"
      | "removeVerifier"
      | "renounceRole"
      | "revokeCredential"
      | "revokeRole"
      | "revokedCredentials"
      | "supportsInterface"
      | "unpause"
      | "verifiers"
      | "verifyCredential"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CredentialAnchored"
      | "CredentialRevoked"
      | "IssuerRegistered"
      | "IssuerRemoved"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "VerifierRegistered"
      | "VerifierRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRACT_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRACT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "anchorCredential",
    values: [BytesLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "credentials",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRecover",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCredential",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerCredentials",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerCredentials",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issuers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerIssuer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCredential",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedCredentials",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCredential",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACT_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anchorCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRecover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIssuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isIssuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuerCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokedCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCredential",
    data: BytesLike
  ): Result;
}

export namespace CredentialAnchoredEvent {
  export type InputTuple = [
    credentialHash: BytesLike,
    issuer: AddressLike,
    timestamp: BigNumberish,
    credentialId: string
  ];
  export type OutputTuple = [
    credentialHash: string,
    issuer: string,
    timestamp: bigint,
    credentialId: string
  ];
  export interface OutputObject {
    credentialHash: string;
    issuer: string;
    timestamp: bigint;
    credentialId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CredentialRevokedEvent {
  export type InputTuple = [
    credentialHash: BytesLike,
    issuer: AddressLike,
    timestamp: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    credentialHash: string,
    issuer: string,
    timestamp: bigint,
    reason: string
  ];
  export interface OutputObject {
    credentialHash: string;
    issuer: string;
    timestamp: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerRegisteredEvent {
  export type InputTuple = [
    issuer: AddressLike,
    did: string,
    name: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    issuer: string,
    did: string,
    name: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    issuer: string;
    did: string;
    name: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerRemovedEvent {
  export type InputTuple = [issuer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [issuer: string, timestamp: bigint];
  export interface OutputObject {
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRegisteredEvent {
  export type InputTuple = [
    verifier: AddressLike,
    name: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [verifier: string, name: string, timestamp: bigint];
  export interface OutputObject {
    verifier: string;
    name: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRemovedEvent {
  export type InputTuple = [verifier: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [verifier: string, timestamp: bigint];
  export interface OutputObject {
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CredentialRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): CredentialRegistry;
  waitForDeployment(): Promise<this>;

  interface: CredentialRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CONTRACT_NAME: TypedContractMethod<[], [string], "view">;

  CONTRACT_VERSION: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ISSUER_ROLE: TypedContractMethod<[], [string], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  anchorCredential: TypedContractMethod<
    [
      credentialHash: BytesLike,
      credentialId: string,
      ipfsHash: string,
      arweaveId: string
    ],
    [void],
    "nonpayable"
  >;

  credentials: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, string, string, string, string] & {
        hash: string;
        issuer: string;
        timestamp: bigint;
        isRevoked: boolean;
        revocationReason: string;
        credentialId: string;
        ipfsHash: string;
        arweaveId: string;
      }
    ],
    "view"
  >;

  emergencyRecover: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalCredentials: bigint;
        totalIssuers: bigint;
        totalVerifiers: bigint;
      }
    ],
    "view"
  >;

  getCredential: TypedContractMethod<
    [credentialHash: BytesLike],
    [CredentialRegistry.CredentialStructOutput],
    "view"
  >;

  getIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [CredentialRegistry.IssuerStructOutput],
    "view"
  >;

  getIssuerCredentials: TypedContractMethod<
    [issuer: AddressLike],
    [string[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [CredentialRegistry.VerifierStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isIssuer: TypedContractMethod<[issuer: AddressLike], [boolean], "view">;

  isVerifier: TypedContractMethod<[verifier: AddressLike], [boolean], "view">;

  issuerCredentials: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  issuers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint, bigint] & {
        did: string;
        name: string;
        isActive: boolean;
        registrationDate: bigint;
        totalCredentials: bigint;
        revokedCredentials: bigint;
      }
    ],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerIssuer: TypedContractMethod<
    [did: string, name: string],
    [void],
    "nonpayable"
  >;

  registerVerifier: TypedContractMethod<[name: string], [void], "nonpayable">;

  registeredAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  removeIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeCredential: TypedContractMethod<
    [credentialHash: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokedCredentials: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  verifiers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint, bigint] & {
        name: string;
        isActive: boolean;
        registrationDate: bigint;
        totalVerifications: bigint;
      }
    ],
    "view"
  >;

  verifyCredential: TypedContractMethod<
    [credentialHash: BytesLike],
    [
      [boolean, string, bigint, boolean] & {
        isValid: boolean;
        issuer: string;
        timestamp: bigint;
        isRevoked: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONTRACT_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONTRACT_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ISSUER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "anchorCredential"
  ): TypedContractMethod<
    [
      credentialHash: BytesLike,
      credentialId: string,
      ipfsHash: string,
      arweaveId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credentials"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, string, string, string, string] & {
        hash: string;
        issuer: string;
        timestamp: bigint;
        isRevoked: boolean;
        revocationReason: string;
        credentialId: string;
        ipfsHash: string;
        arweaveId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyRecover"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalCredentials: bigint;
        totalIssuers: bigint;
        totalVerifiers: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCredential"
  ): TypedContractMethod<
    [credentialHash: BytesLike],
    [CredentialRegistry.CredentialStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIssuer"
  ): TypedContractMethod<
    [issuer: AddressLike],
    [CredentialRegistry.IssuerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIssuerCredentials"
  ): TypedContractMethod<[issuer: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVerifier"
  ): TypedContractMethod<
    [verifier: AddressLike],
    [CredentialRegistry.VerifierStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "issuerCredentials"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "issuers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint, bigint, bigint] & {
        did: string;
        name: string;
        isActive: boolean;
        registrationDate: bigint;
        totalCredentials: bigint;
        revokedCredentials: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerIssuer"
  ): TypedContractMethod<[did: string, name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerVerifier"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registeredAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeCredential"
  ): TypedContractMethod<
    [credentialHash: BytesLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokedCredentials"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifiers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint, bigint] & {
        name: string;
        isActive: boolean;
        registrationDate: bigint;
        totalVerifications: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyCredential"
  ): TypedContractMethod<
    [credentialHash: BytesLike],
    [
      [boolean, string, bigint, boolean] & {
        isValid: boolean;
        issuer: string;
        timestamp: bigint;
        isRevoked: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CredentialAnchored"
  ): TypedContractEvent<
    CredentialAnchoredEvent.InputTuple,
    CredentialAnchoredEvent.OutputTuple,
    CredentialAnchoredEvent.OutputObject
  >;
  getEvent(
    key: "CredentialRevoked"
  ): TypedContractEvent<
    CredentialRevokedEvent.InputTuple,
    CredentialRevokedEvent.OutputTuple,
    CredentialRevokedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerRegistered"
  ): TypedContractEvent<
    IssuerRegisteredEvent.InputTuple,
    IssuerRegisteredEvent.OutputTuple,
    IssuerRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IssuerRemoved"
  ): TypedContractEvent<
    IssuerRemovedEvent.InputTuple,
    IssuerRemovedEvent.OutputTuple,
    IssuerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRegistered"
  ): TypedContractEvent<
    VerifierRegisteredEvent.InputTuple,
    VerifierRegisteredEvent.OutputTuple,
    VerifierRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRemoved"
  ): TypedContractEvent<
    VerifierRemovedEvent.InputTuple,
    VerifierRemovedEvent.OutputTuple,
    VerifierRemovedEvent.OutputObject
  >;

  filters: {
    "CredentialAnchored(bytes32,address,uint256,string)": TypedContractEvent<
      CredentialAnchoredEvent.InputTuple,
      CredentialAnchoredEvent.OutputTuple,
      CredentialAnchoredEvent.OutputObject
    >;
    CredentialAnchored: TypedContractEvent<
      CredentialAnchoredEvent.InputTuple,
      CredentialAnchoredEvent.OutputTuple,
      CredentialAnchoredEvent.OutputObject
    >;

    "CredentialRevoked(bytes32,address,uint256,string)": TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;
    CredentialRevoked: TypedContractEvent<
      CredentialRevokedEvent.InputTuple,
      CredentialRevokedEvent.OutputTuple,
      CredentialRevokedEvent.OutputObject
    >;

    "IssuerRegistered(address,string,string,uint256)": TypedContractEvent<
      IssuerRegisteredEvent.InputTuple,
      IssuerRegisteredEvent.OutputTuple,
      IssuerRegisteredEvent.OutputObject
    >;
    IssuerRegistered: TypedContractEvent<
      IssuerRegisteredEvent.InputTuple,
      IssuerRegisteredEvent.OutputTuple,
      IssuerRegisteredEvent.OutputObject
    >;

    "IssuerRemoved(address,uint256)": TypedContractEvent<
      IssuerRemovedEvent.InputTuple,
      IssuerRemovedEvent.OutputTuple,
      IssuerRemovedEvent.OutputObject
    >;
    IssuerRemoved: TypedContractEvent<
      IssuerRemovedEvent.InputTuple,
      IssuerRemovedEvent.OutputTuple,
      IssuerRemovedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifierRegistered(address,string,uint256)": TypedContractEvent<
      VerifierRegisteredEvent.InputTuple,
      VerifierRegisteredEvent.OutputTuple,
      VerifierRegisteredEvent.OutputObject
    >;
    VerifierRegistered: TypedContractEvent<
      VerifierRegisteredEvent.InputTuple,
      VerifierRegisteredEvent.OutputTuple,
      VerifierRegisteredEvent.OutputObject
    >;

    "VerifierRemoved(address,uint256)": TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
    VerifierRemoved: TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
  };
}
