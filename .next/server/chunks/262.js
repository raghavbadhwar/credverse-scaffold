exports.id=262,exports.ids=[262],exports.modules={4182:(e,t,r)=>{Promise.resolve().then(r.t.bind(r,2994,23)),Promise.resolve().then(r.t.bind(r,6114,23)),Promise.resolve().then(r.t.bind(r,9727,23)),Promise.resolve().then(r.t.bind(r,9671,23)),Promise.resolve().then(r.t.bind(r,1868,23)),Promise.resolve().then(r.t.bind(r,4759,23))},7230:()=>{},740:(e,t,r)=>{"use strict";r.d(t,{Tc:()=>d,g6:()=>l}),r(382);var i=r(1389);let n=["function anchorCredential(bytes32 credentialHash, string credentialId, string ipfsHash, string arweaveId) external","function verifyCredential(bytes32 credentialHash) external view returns (bool isValid, address issuer, uint256 timestamp, bool isRevoked)","function getCredential(bytes32 credentialHash) external view returns (tuple(bytes32 hash, address issuer, uint256 timestamp, bool isRevoked, string revocationReason, string credentialId, string ipfsHash, string arweaveId))","function isIssuer(address issuer) external view returns (bool)"],a="0x8ce3f05fE9cE9D63dA4b9E80EE46C4df07C12BcE";function s(){throw Error("No injected wallet found. Please install MetaMask.")}async function o(){let e=s();return await e.send("eth_requestAccounts",[]),await e.getSigner()}async function c(e=!1){if(!a)throw Error("Missing NEXT_PUBLIC_CREDENTIAL_REGISTRY_ADDRESS");if(e){let e=s();return new i.CH(a,n,e)}let t=await o();return new i.CH(a,n,t)}async function l(e,t,r,i){let n=await c(!1),a=await n.anchorCredential(e,t,r,i);return await a.wait()}async function d(e){let t=await c(!0),r=await t.verifyCredential(e);return{isValid:r[0],issuer:r[1],timestamp:r[2],isRevoked:r[3]}}},7672:(e,t,r)=>{"use strict";r.d(t,{Ab:()=>h,eG:()=>c,h6:()=>l,lw:()=>f});var i=r(9122),n=r(3336),a=r(3518),s=r(2428),o=r(4251);class c{constructor(e,t){this.issuerPrivateKey=e,this.issuerDID=t}async createCredential(e,t,r){return{"@context":["https://www.w3.org/2018/credentials/v1","https://credverse.in/contexts/v1"],id:this.generateCredentialId(),type:["VerifiableCredential","CredVerseCredential",r],issuer:this.issuerDID,issuanceDate:new Date().toISOString(),credentialSubject:e,metadata:{...t,blockchainHash:"",issuerDID:this.issuerDID,templateId:r}}}async signCredential(e){try{let t=new i.w(this.issuerPrivateKey),r=this.hashCredential(e),n=await t.signMessage(r),a={type:"EthereumEip712Signature2021",created:new Date().toISOString(),verificationMethod:`${this.issuerDID}#keys-1`,proofPurpose:"assertionMethod",proofValue:n};return{...e,proof:a}}catch(e){throw Error(`Failed to sign credential: ${e}`)}}async verifyCredential(e){try{if(!e.proof)return!1;let{proof:t,...r}=e,i=this.hashCredential(r),s=n.n(i,t.proofValue),o=e.issuer;if("string"==typeof o&&o.startsWith("did:pkh:")){let e=o.split(":"),t=e[e.length-1];return s.toLowerCase()===t.toLowerCase()}let c=await this.resolveDIDPublicKey(o),l=a.d(c);return s.toLowerCase()===l.toLowerCase()}catch(e){return console.error("Credential verification failed:",e),!1}}async anchorToBlockchain(e,t="polygon-amoy"){try{let t=this.hashCredential(e);return s.w(o.Y0(t+Date.now()))}catch(e){throw Error(`Failed to anchor credential to blockchain: ${e}`)}}async storeToIPFS(e){try{let t;let i=process.env.IPFS_ENDPOINT||"https://ipfs.infura.io:5001/api/v0",n=process.env.IPFS_PROJECT_ID,a=process.env.IPFS_PROJECT_SECRET,{create:s}=await r.e(515).then(r.bind(r,4515));if(n&&a){let e=`${n}:${a}`;"undefined"!=typeof btoa?t="Basic "+btoa(e):"undefined"!=typeof Buffer&&(t="Basic "+Buffer.from(e).toString("base64"))}let o=s({url:i,headers:t?{Authorization:t}:void 0}),c={...e,storedAt:new Date().toISOString(),storageProvider:"ipfs"},{cid:l}=await o.add(JSON.stringify(c));return l.toString()}catch(t){return s.w(o.Y0(JSON.stringify(e)))}}async storeToArweave(e){try{let t=process.env.ARWEAVE_HOST||"arweave.net",i=Number(process.env.ARWEAVE_PORT||443),n=process.env.ARWEAVE_PROTOCOL||"https",a=process.env.ARWEAVE_JWK?JSON.parse(process.env.ARWEAVE_JWK):null;if(!a)return"";let s=await r.e(224).then(r.t.bind(r,224,23)),o=(s.default||s).init({host:t,port:i,protocol:n}),c={...e,storedAt:new Date().toISOString(),storageProvider:"arweave"},l=await o.createTransaction({data:JSON.stringify(c)},a);l.addTag("Content-Type","application/json"),await o.transactions.sign(l,a);let d=await o.transactions.post(l);if(200===d.status||202===d.status)return l.id;return""}catch(e){return""}}async revokeCredential(e,t="Credential revoked by issuer"){try{return!0}catch(e){throw Error(`Failed to revoke credential: ${e}`)}}async isCredentialRevoked(e){try{return!1}catch(e){return console.error("Failed to check credential revocation status:",e),!1}}generateCredentialId(){let e=Date.now(),t=Math.random().toString(36).substring(2);return`urn:credverse:credential:${e}:${t}`}hashCredential(e){let t=d(e);return s.w(o.Y0(JSON.stringify(t)))}normalizeCredential(e){return d(e)}sortObjectKeys(e){return u(e)}async resolveDIDPublicKey(e){try{throw Error(`Unsupported DID method: ${e}`)}catch(e){throw Error(`Failed to resolve DID: ${e}`)}}}function l(e){let t=d(e);return s.w(o.Y0(JSON.stringify(t)))}function d(e){let{proof:t,...r}=e||{};return u(r)}function u(e){if(null===e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(e=>u(e));let t={};return Object.keys(e).sort().forEach(r=>{t[r]=u(e[r])}),t}function h(e){return`http://localhost:3000/verify/${e.id}`}function f(e){return JSON.stringify(e,null,2)}},1506:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o,metadata:()=>s});var i=r(9510),n=r(5384),a=r.n(n);r(1159),r(7272);let s={metadataBase:new URL("http://localhost:3000"),title:"CredVerse - Protocol-Grade Credential Infrastructure",description:"India's first protocol-grade credential infrastructure for universities, students, and recruiters. W3C compliant, blockchain-anchored, and privacy-preserving.",keywords:"credentials, blockchain, education, verifiable-credentials, india, polygon, w3c, did",authors:[{name:"CredVerse Team"}],openGraph:{title:"CredVerse - Protocol-Grade Credential Infrastructure",description:"India's first protocol-grade credential infrastructure for universities, students, and recruiters.",url:"https://credverse.in",siteName:"CredVerse",images:[{url:"/og-image.png",width:1200,height:630,alt:"CredVerse - Protocol-Grade Credential Infrastructure"}],locale:"en_IN",type:"website"},twitter:{card:"summary_large_image",title:"CredVerse - Protocol-Grade Credential Infrastructure",description:"India's first protocol-grade credential infrastructure for universities, students, and recruiters.",images:["/og-image.png"]},robots:{index:!0,follow:!0,googleBot:{index:!0,follow:!0,"max-video-preview":-1,"max-image-preview":"large","max-snippet":-1}},verification:{google:"your-google-verification-code"}};function o({children:e}){return(0,i.jsxs)("html",{lang:"en",children:[(0,i.jsxs)("head",{children:[i.jsx("link",{rel:"icon",href:"/favicon.ico"}),i.jsx("link",{rel:"apple-touch-icon",href:"/apple-touch-icon.png"}),i.jsx("link",{rel:"manifest",href:"/manifest.json"}),i.jsx("meta",{name:"theme-color",content:"#0ea5e9"}),i.jsx("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),i.jsx("body",{className:a().className,children:i.jsx("div",{className:"min-h-screen bg-gray-50",children:e})})]})}},7272:()=>{}};